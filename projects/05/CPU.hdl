// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/**
Tawaliou's comments:
 1- We've two types of instructions:
		- A-instruction (addressing): load memory location
		- c-instruction (computation): check, compute, jump
	So we need to ensure at each step we're doing an A-instruction
	or C-instruction and based on this result we do appropirate operation 
	by checking against "instruction[15]"
	ex: in case of A-instruction we must always load data in ARegister so 
	if instruction[15]=0 then the pin load of ARegister must be set to true

 2-   
*/

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
		
		// Instruction handling
		Mux16(a=instruction, b=aluout, sel=instruction[15], out=outmux1); /* Mux instruction */
		
		Mux(a=true, b=instruction[5], sel=instruction[15], out=loada);
		ARegister(in=outmux1 ,load=loada ,out=outrega, out[0..14]=addressM);	/* A register */

		// ALU output
		And(a=instruction[4], b=instruction[15], out=loadd);
		DRegister(in=aluout ,load=loadd ,out= outregd); /* D register */
		
		And(a=instruction[12], b=instruction[15], out=mux2sel);
		Mux16(a=outrega, b=inM, sel=mux2sel, out=outmux2);
		
		// A-instruction fo pin 11..6
		ALU(
			x=outregd,
			y=outmux2,
			zx=instruction[11] ,
			nx=instruction[10] ,
			zy=instruction[9] ,
			ny=instruction[8] ,
			f=instruction[7] ,
			no=instruction[6] ,
			out=aluout, 
			out=outM ,
			zr=outzr,
			ng=outng);

		And(a=instruction[3], b=instruction[15], out=writeM);
 
		// Control - Next instructions
		And(a=instruction[0], b=instruction[15], out=j3);
		And(a=instruction[1], b=instruction[15], out=j2);
		And(a=instruction[2], b=instruction[15], out=j1);
		DMux8Way(
			in=true, sel[0]=j3, sel[1]=j2, sel[2]=j1,
			a=null, b=jgt, c=jeq, d=jge, 
			e=jlt, f=jne, g=jle, h=jmp
		); /* jump instruction */

		DMux4Way(
			in=true, sel[0]=outng, sel[1]=outzr, 
			a=allzero, b=zerone, c=onezero, d=oneone
		); /* zr and ng */

		// jumps condition
		Not(in=outzr, out=notoutzr);
		Not(in=outng, out=notoutng);

		// JGT
		And(a=notoutng, b=notoutzr, out=jgt1);
		And(a=jgt, b=jgt1, out=JGT);
		
		// JEQ
		And(a=jeq, b=outzr, out=JEQ);

		// JGE // come back here
		Or(a=outzr, b=notoutng, out=jge1);
		And(a=jge, b=jge1, out=JGE);

		// JLT
		And(a=outng, b=notoutzr, out=jlt1);
		And(a=jlt, b=jlt1, out=JLT);

		// JNE
		And(a=jne, b=notoutzr, out=JNE);

		// JLE
		Or(a=outzr, b=outng, out=jle1);
		And(a=jle, b=jle1, out=JLE);

		// J(j1,j2,j3,zr,ng)
		Or8Way(
			in[0]=false, // soit Insctruction
			in[1]=JGT,
			in[2]=JEQ,
			in[3]=JGE,
			in[4]=JLT,
			in[5]=JNE,
			in[6]=JLE,
			in[7]=jmp,
			out=jump
		); /* jump decision */

		PC(in=outrega ,load=jump ,inc=true, reset=reset, out[0..14]=pc);		
}