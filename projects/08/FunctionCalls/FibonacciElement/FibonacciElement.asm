// Bootstrap
// SP=256
@256
D=A
@SP
M=D
// call Sys.init
@null$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(null$ret.0)

//Main.vm
// function Main.fibonacci 0
(Main.fibonacci)
@Main.fibonacci$i
M=0
(Main.fibonacci$LOOP_0)
@0
D=A
@Main.fibonacci$i
D=D-M
@Main.fibonacci$END_LOOP_0
D;JLE
@SP
A=M
M=0
@SP
M=M+1
@Main.fibonacci$i
M=M+1
@Main.fibonacci$LOOP_0
0; JMP
(Main.fibonacci$END_LOOP_0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt                     // checks if n<2
@SP
A=M-1
D=M
A=A-1
D=M-D
@LT_0
D;JLT
@SP
A=M-1
A=A-1
M=0
@END_LT_0
0;JMP
(LT_0)
@SP
A=M-1
A=A-1
M=-1
(END_LT_0)
@SP
M=M-1
// if-goto IF_TRUE
@SP
A=M-1
D=M
@SP
M=M-1
@Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// label IF_TRUE          // if n<2, return n
(Main.fibonacci$IF_TRUE)
// push argument 0        
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@Main.fibonacci$END_FRAME
M=D
@5
D=A
@Main.fibonacci$END_FRAME
A=M-D
D=M
@Main.fibonacci$RET_ADDR
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@SP
M=M-1
@1
D=A
@ARG
D=M+D
@SP
M=D
@1
D=A
@Main.fibonacci$END_FRAME
A=M-D
D=M
@THAT
M=D
@2
D=A
@Main.fibonacci$END_FRAME
A=M-D
D=M
@THIS
M=D
@3
D=A
@Main.fibonacci$END_FRAME
A=M-D
D=M
@ARG
M=D
@4
D=A
@Main.fibonacci$END_FRAME
A=M-D
D=M
@LCL
M=D
@Main.fibonacci$RET_ADDR
A=M
0;JMP
// label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(null$IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
// call Main.fibonacci 1  // computes fib(n-2)
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
// call Main.fibonacci 1  // computes fib(n-1)
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
// add                    // returns fib(n-1) + fib(n-2)
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
// return
@LCL
D=M
@null$END_FRAME
M=D
@5
D=A
@null$END_FRAME
A=M-D
D=M
@null$RET_ADDR
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@SP
M=M-1
@1
D=A
@ARG
D=M+D
@SP
M=D
@1
D=A
@null$END_FRAME
A=M-D
D=M
@THAT
M=D
@2
D=A
@null$END_FRAME
A=M-D
D=M
@THIS
M=D
@3
D=A
@null$END_FRAME
A=M-D
D=M
@ARG
M=D
@4
D=A
@null$END_FRAME
A=M-D
D=M
@LCL
M=D
@null$RET_ADDR
A=M
0;JMP

//Sys.vm
// function Sys.init 0
(Sys.init)
@Sys.init$i
M=0
(Sys.init$LOOP_0)
@0
D=A
@Sys.init$i
D=D-M
@Sys.init$END_LOOP_0
D;JLE
@SP
A=M
M=0
@SP
M=M+1
@Sys.init$i
M=M+1
@Sys.init$LOOP_0
0; JMP
(Sys.init$END_LOOP_0)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1   // computes the 4'th fibonacci element
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
// label WHILE
(Sys.init$WHILE)
// goto WHILE              // loops infinitely
@Sys.init$WHILE
0;JMP
